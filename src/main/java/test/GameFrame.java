/*
 *  Brick Destroy - A simple Arcade video game
 *   Copyright (C) 2017  Filippo Ranza
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package test;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;

/**
 * This is GameFrame class which is a container to add GameBoardView and HomeMenuView components.
 */
public class GameFrame extends JFrame implements WindowFocusListener {

    private static final String DEF_TITLE = "Brick Destroy";

    private GameBoardView gameBoardView;
    private HomeMenuView homeMenuView;
    private HomeMenuModel homeMenuModel;

    private boolean gaming;

    /**
     * This is a constructor to initialise some variables in GameFrame class and create
     * GameBoardView and HomeMenuView objects. It also sets the LayoutManager as BorderLayout,
     * add HomeMenuView components to this container and enables decorations for this frame.
     */
    public GameFrame(){
        super();
        gaming = false;
        this.setLayout(new BorderLayout());
        gameBoardView = new GameBoardView(this);
        homeMenuModel = new HomeMenuModel(this,new Dimension(450,300));
        homeMenuView = new HomeMenuView(homeMenuModel);
        this.add(homeMenuView,BorderLayout.CENTER);
        this.setUndecorated(true);
    }

    /**
     * This method sets the title of this frame, set the operation that will happen when user
     * initialises a "close" on this frame, in this case is to exit the application.
     * It also makes sure this Window can fit its subcomponents, locate the screen properly by
     * calling autoLocate method, prevents the user from resizing this frame so that the gome boards
     * always remains in the center.
     * Lastly, set this frame visible so that this frame can be shown.
     */
    public void initialize(){
        this.setTitle(DEF_TITLE);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.pack();
        this.autoLocate();
        this.setResizable(false);
        this.setVisible(true);
    }

    /**
     * This method disposes the GameFrame screen and removes HomeMenuView component
     * to add GameBoardView component to this frame and initialises this frame accordingly.
     * WindowFocusListener is also added to avoid problems with graphics.
     */
    public void enableGameBoard(){
        this.dispose();//when click on startButton, dispose GameFrame screen
        this.remove(homeMenuView);
        this.add(gameBoardView,BorderLayout.CENTER);
        this.setUndecorated(false);
        initialize();
        /*to avoid problems with graphics, focus controller is added here*/
        this.addWindowFocusListener(this);
    }

    /**
     * This method will auto locate the HomeMenuView / GameBoardView components
     * in the middle of this frame.
     */
    private void autoLocate(){
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (size.width - this.getWidth()) / 2;
        int y = (size.height - this.getHeight()) / 2;
        this.setLocation(x,y);
    }

    /**
     * When this Window is set to be the focused Window, which means that the Window,
     * set gaming to true so that user can play the game.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowGainedFocus(WindowEvent windowEvent) {
        /*
            the first time the frame loses focus is because
            it has been disposed to install the GameBoardView,
            so when it regains the focus it's ready to play.
            of course calling a method such as 'onLostFocus'
            is useful only if the GameBoardView as been displayed
            at least once
         */
        gaming = true;
    }

    /**
     * When this Window is no longer the focused Window and if gaming variable is true,
     * call the onLostFocus method in GameBoardView class to perform the necessary actions.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowLostFocus(WindowEvent windowEvent) {
        if(gaming)
            gameBoardView.onLostFocus();

    }
}