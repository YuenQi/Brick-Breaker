/*
 *  Brick Destroy - A simple Arcade video game
 *   Copyright (C) 2017  Filippo Ranza
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package view;

import model.Ball;
import model.Level;
import model.Wall;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

/**
 * This is a DebugConsole class which creates a dialog window.
 */
public class DebugConsole extends JDialog implements WindowListener{

    private static final String TITLE = "Debug Console";

    private JFrame owner;
    private DebugPanel debugPanel;
    private GameBoardView gameBoardView;
    private Wall wall;
    private Level level;

    /**
     * This is a constructor to initialise some variables in DebugConsole class
     * and a debug panel to this dialog window.
     *
     * @param owner
     * @param wall
     * @param level
     * @param gameBoardView
     */
    public DebugConsole(JFrame owner, Wall wall, Level level, GameBoardView gameBoardView){
        this.wall = wall;
        this.level = level;
        this.owner = owner;
        this.gameBoardView = gameBoardView;
        initialize();
        debugPanel = new DebugPanel(wall,level);
        this.add(debugPanel,BorderLayout.CENTER);
        this.pack();
    }

    /**
     * This method is to set up the dialog window.
     */
    private void initialize(){
        this.setModal(true);
        this.setTitle(TITLE);
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        this.setLayout(new BorderLayout());
        this.addWindowListener(this);
        this.setFocusable(true);
    }

    /**
     * This method is to locate Debug Console (dialog window) in the middle of the frame
     * when it first pops out
     */
    private void setLocation(){
        int x = ((owner.getWidth() - this.getWidth()) / 2) + owner.getX();
        int y = ((owner.getHeight() - this.getHeight()) / 2) + owner.getY();
        this.setLocation(x,y);
    }

    /**
     * This method is used to define some actions performed if this dialog window
     * is opened but it does nothing in this class as no implementation is provided.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                    (generated by a Window object when it is opened, closed, activated,
     *                    deactivated, iconified, or deiconified, or when focus is transferred
     *                    into or out of the Window)
     */
    @Override
    public void windowOpened(WindowEvent windowEvent) {

    }

    /**
     * This method repaints GameBoardView object if the user attempts to close the dialog window.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                    (generated by a Window object when it is opened, closed, activated,
     *                    deactivated, iconified, or deiconified, or when focus is transferred
     *                    into or out of the Window)
     */
    @Override
    public void windowClosing(WindowEvent windowEvent) {
        gameBoardView.repaint();
    }

    /**
     * This method is used to define some actions performed if this dialog window
     * has been closed as the result of calling dispose on the window but
     * it does nothing in this class as no implementation is provided.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowClosed(WindowEvent windowEvent) {

    }

    /**
     * This method is used to define some actions performed if this dialog window
     * is changed from a normal to a minimized state but
     * it does nothing in this class as no implementation is provided.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowIconified(WindowEvent windowEvent) {

    }

    /**
     * This method is used to define some actions performed if this dialog window
     * is changed from a minimized to a normal state but
     * it does nothing in this class as no implementation is provided.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowDeiconified(WindowEvent windowEvent) {

    }

    /**
     * If this dialog window becomes the active Window,
     * locate the Debug Console (dialog window) in the middle of the frame,
     * create a Ball object and get it from the Wall class, then change the
     * speed of ball in x and y direction accordingly.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowActivated(WindowEvent windowEvent) {
        setLocation();
        Ball b = wall.getBall();
        debugPanel.setValues(b.getSpeedX(),b.getSpeedY());
    }

    /**
     * This method is used to define some actions performed if this
     * dialog window is no longer the active Window but
     * it does nothing in this class as no implementation is provided.
     *
     * @param windowEvent a low-level event that indicates that a window has changed its status
     *                     (generated by a Window object when it is opened, closed, activated,
     *                     deactivated, iconified, or deiconified, or when focus is transferred
     *                     into or out of the Window)
     */
    @Override
    public void windowDeactivated(WindowEvent windowEvent) {

    }
}